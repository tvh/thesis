#include <accelerate_cuda.h>
static TexWord32 arrIn0_0;
static TexWord32 arrIn1_3;
static TexWord32 arrIn1_2;
static TexWord32 arrIn1_1;
static TexWord32 arrIn1_0;
extern "C" __global__ void permute(const Int64 shIn0_1, const Int64 shIn0_0, const Int64 shOut_0, Int64* __restrict__ arrOut_0)
{
const Int64 shIn0 = shIn0_0;
const int shapeSize = shIn0;
const int gridSize = __umul24(blockDim.x, gridDim.x);
int ix;

for (ix = __umul24(blockDim.x, blockIdx.x) + threadIdx.x; ix < shapeSize; ix += gridSize) {
const Int64 sh0 = ({ assert(ix >= 0 && ix < shIn0); ix; });
const Int64 v0 = 0;
const Word32 v1 = indexArray(arrIn1_3, v0);
const Word32 v2 = indexArray(arrIn1_2, v0);
const Word32 v3 = indexArray(arrIn1_1, v0);
const Word32 v4 = indexArray(arrIn1_0, v0);
const Word32 v5 = (Word32) 4023233417;
const Word32 v6 = (Word32) 271733878;
const Word32 v7 = (Word32) 2562383102;
const Int64 v8 = (Int64) 0 * shIn0_0 + sh0;
const Word32 v9 = v5 + rotateL((Word32) 3614090359 + indexArray(arrIn0_0, v8), (Int64) 7);
const Int64 v10 = (Int64) 1 * shIn0_0 + sh0;
const Word32 v11 = v9 + rotateL((Word32) 3905402710 + (v6 + (v5 & v9 | v7 & ~v9)) + indexArray(arrIn0_0, v10), (Int64) 12);
const Int64 v12 = (Int64) 2 * shIn0_0 + sh0;
const Word32 v13 = v11 + rotateL((Word32) 606105819 + (v7 + (v11 & v9 | v5 & ~v11)) + indexArray(arrIn0_0, v12), (Int64) 17);
const Int64 v14 = (Int64) 3 * shIn0_0 + sh0;
const Word32 v15 = v13 + rotateL((Word32) 3250441966 + (v5 + (v13 & v11 | ~v13 & v9)) + indexArray(arrIn0_0, v14), (Int64) 22);
const Int64 v16 = (Int64) 4 * shIn0_0 + sh0;
const Word32 v17 = v15 + rotateL((Word32) 4118548399 + (v9 + (v15 & v13 | ~v15 & v11)) + indexArray(arrIn0_0, v16), (Int64) 7);
const Int64 v18 = (Int64) 5 * shIn0_0 + sh0;
const Word32 v19 = v17 + rotateL((Word32) 1200080426 + (v11 + (v17 & v15 | ~v17 & v13)) + indexArray(arrIn0_0, v18), (Int64) 12);
const Int64 v20 = (Int64) 6 * shIn0_0 + sh0;
const Word32 v21 = v19 + rotateL((Word32) 2821735955 + (v13 + (v19 & v17 | ~v19 & v15)) + indexArray(arrIn0_0, v20), (Int64) 17);
const Int64 v22 = (Int64) 7 * shIn0_0 + sh0;
const Word32 v23 = v21 + rotateL((Word32) 4249261313 + (v15 + (v21 & v19 | ~v21 & v17)) + indexArray(arrIn0_0, v22), (Int64) 22);
const Int64 v24 = (Int64) 8 * shIn0_0 + sh0;
const Word32 v25 = v23 + rotateL((Word32) 1770035416 + (v17 + (v23 & v21 | ~v23 & v19)) + indexArray(arrIn0_0, v24), (Int64) 7);
const Int64 v26 = (Int64) 9 * shIn0_0 + sh0;
const Word32 v27 = v25 + rotateL((Word32) 2336552879 + (v19 + (v25 & v23 | ~v25 & v21)) + indexArray(arrIn0_0, v26), (Int64) 12);
const Int64 v28 = (Int64) 10 * shIn0_0 + sh0;
const Word32 v29 = v27 + rotateL((Word32) 4294925233 + (v21 + (v27 & v25 | ~v27 & v23)) + indexArray(arrIn0_0, v28), (Int64) 17);
const Int64 v30 = (Int64) 11 * shIn0_0 + sh0;
const Word32 v31 = v29 + rotateL((Word32) 2304563134 + (v23 + (v29 & v27 | ~v29 & v25)) + indexArray(arrIn0_0, v30), (Int64) 22);
const Int64 v32 = (Int64) 12 * shIn0_0 + sh0;
const Word32 v33 = v31 + rotateL((Word32) 1804603682 + (v25 + (v31 & v29 | ~v31 & v27)) + indexArray(arrIn0_0, v32), (Int64) 7);
const Int64 v34 = (Int64) 13 * shIn0_0 + sh0;
const Word32 v35 = v33 + rotateL((Word32) 4254626195 + (v27 + (v33 & v31 | ~v33 & v29)) + indexArray(arrIn0_0, v34), (Int64) 12);
const Int64 v36 = (Int64) 14 * shIn0_0 + sh0;
const Word32 v37 = v35 + rotateL((Word32) 2792965006 + (v29 + (v35 & v33 | ~v35 & v31)) + indexArray(arrIn0_0, v36), (Int64) 17);
const Int64 v38 = (Int64) 15 * shIn0_0 + sh0;
const Word32 v39 = v37 + rotateL((Word32) 1236535329 + (v31 + (v37 & v35 | ~v37 & v33)) + indexArray(arrIn0_0, v38), (Int64) 22);
const Int64 v40 = (Int64) 1 * shIn0_0 + sh0;
const Word32 v41 = v39 + rotateL((Word32) 4129170786 + (v33 + (v39 & v35 | v37 & ~v35)) + indexArray(arrIn0_0, v40), (Int64) 5);
const Int64 v42 = (Int64) 6 * shIn0_0 + sh0;
const Word32 v43 = v41 + rotateL((Word32) 3225465664 + (v35 + (v41 & v37 | v39 & ~v37)) + indexArray(arrIn0_0, v42), (Int64) 9);
const Int64 v44 = (Int64) 11 * shIn0_0 + sh0;
const Word32 v45 = v43 + rotateL((Word32) 643717713 + (v37 + (v43 & v39 | v41 & ~v39)) + indexArray(arrIn0_0, v44), (Int64) 14);
const Int64 v46 = (Int64) 0 * shIn0_0 + sh0;
const Word32 v47 = v45 + rotateL((Word32) 3921069994 + (v39 + (v45 & v41 | v43 & ~v41)) + indexArray(arrIn0_0, v46), (Int64) 20);
const Int64 v48 = (Int64) 5 * shIn0_0 + sh0;
const Word32 v49 = v47 + rotateL((Word32) 3593408605 + (v41 + (v47 & v43 | v45 & ~v43)) + indexArray(arrIn0_0, v48), (Int64) 5);
const Int64 v50 = (Int64) 10 * shIn0_0 + sh0;
const Word32 v51 = v49 + rotateL((Word32) 38016083 + (v43 + (v49 & v45 | v47 & ~v45)) + indexArray(arrIn0_0, v50), (Int64) 9);
const Int64 v52 = (Int64) 15 * shIn0_0 + sh0;
const Word32 v53 = v51 + rotateL((Word32) 3634488961 + (v45 + (v51 & v47 | v49 & ~v47)) + indexArray(arrIn0_0, v52), (Int64) 14);
const Int64 v54 = (Int64) 4 * shIn0_0 + sh0;
const Word32 v55 = v53 + rotateL((Word32) 3889429448 + (v47 + (v53 & v49 | v51 & ~v49)) + indexArray(arrIn0_0, v54), (Int64) 20);
const Int64 v56 = (Int64) 9 * shIn0_0 + sh0;
const Word32 v57 = v55 + rotateL((Word32) 568446438 + (v49 + (v55 & v51 | v53 & ~v51)) + indexArray(arrIn0_0, v56), (Int64) 5);
const Int64 v58 = (Int64) 14 * shIn0_0 + sh0;
const Word32 v59 = v57 + rotateL((Word32) 3275163606 + (v51 + (v57 & v53 | v55 & ~v53)) + indexArray(arrIn0_0, v58), (Int64) 9);
const Int64 v60 = (Int64) 3 * shIn0_0 + sh0;
const Word32 v61 = v59 + rotateL((Word32) 4107603335 + (v53 + (v59 & v55 | v57 & ~v55)) + indexArray(arrIn0_0, v60), (Int64) 14);
const Int64 v62 = (Int64) 8 * shIn0_0 + sh0;
const Word32 v63 = v61 + rotateL((Word32) 1163531501 + (v55 + (v61 & v57 | v59 & ~v57)) + indexArray(arrIn0_0, v62), (Int64) 20);
const Int64 v64 = (Int64) 13 * shIn0_0 + sh0;
const Word32 v65 = v63 + rotateL((Word32) 2850285829 + (v57 + (v63 & v59 | v61 & ~v59)) + indexArray(arrIn0_0, v64), (Int64) 5);
const Int64 v66 = (Int64) 2 * shIn0_0 + sh0;
const Word32 v67 = v65 + rotateL((Word32) 4243563512 + (v59 + (v65 & v61 | v63 & ~v61)) + indexArray(arrIn0_0, v66), (Int64) 9);
const Int64 v68 = (Int64) 7 * shIn0_0 + sh0;
const Word32 v69 = v67 + rotateL((Word32) 1735328473 + (v61 + (v67 & v63 | v65 & ~v63)) + indexArray(arrIn0_0, v68), (Int64) 14);
const Int64 v70 = (Int64) 12 * shIn0_0 + sh0;
const Word32 v71 = v69 + rotateL((Word32) 2368359562 + (v63 + (v69 & v65 | v67 & ~v65)) + indexArray(arrIn0_0, v70), (Int64) 20);
const Int64 v72 = (Int64) 5 * shIn0_0 + sh0;
const Word32 v73 = v71 + rotateL((Word32) 4294588738 + (v65 + (v71 ^ v69 ^ v67)) + indexArray(arrIn0_0, v72), (Int64) 4);
const Int64 v74 = (Int64) 8 * shIn0_0 + sh0;
const Word32 v75 = v73 + rotateL((Word32) 2272392833 + (v67 + (v73 ^ v71 ^ v69)) + indexArray(arrIn0_0, v74), (Int64) 11);
const Int64 v76 = (Int64) 11 * shIn0_0 + sh0;
const Word32 v77 = v75 + rotateL((Word32) 1839030562 + (v69 + (v75 ^ v73 ^ v71)) + indexArray(arrIn0_0, v76), (Int64) 16);
const Int64 v78 = (Int64) 14 * shIn0_0 + sh0;
const Word32 v79 = v77 + rotateL((Word32) 4259657740 + (v71 + (v77 ^ v75 ^ v73)) + indexArray(arrIn0_0, v78), (Int64) 23);
const Int64 v80 = (Int64) 1 * shIn0_0 + sh0;
const Word32 v81 = v79 + rotateL((Word32) 2763975236 + (v73 + (v79 ^ v77 ^ v75)) + indexArray(arrIn0_0, v80), (Int64) 4);
const Int64 v82 = (Int64) 4 * shIn0_0 + sh0;
const Word32 v83 = v81 + rotateL((Word32) 1272893353 + (v75 + (v81 ^ v79 ^ v77)) + indexArray(arrIn0_0, v82), (Int64) 11);
const Int64 v84 = (Int64) 7 * shIn0_0 + sh0;
const Word32 v85 = v83 + rotateL((Word32) 4139469664 + (v77 + (v83 ^ v81 ^ v79)) + indexArray(arrIn0_0, v84), (Int64) 16);
const Int64 v86 = (Int64) 10 * shIn0_0 + sh0;
const Word32 v87 = v85 + rotateL((Word32) 3200236656 + (v79 + (v85 ^ v83 ^ v81)) + indexArray(arrIn0_0, v86), (Int64) 23);
const Int64 v88 = (Int64) 13 * shIn0_0 + sh0;
const Word32 v89 = v87 + rotateL((Word32) 681279174 + (v81 + (v87 ^ v85 ^ v83)) + indexArray(arrIn0_0, v88), (Int64) 4);
const Int64 v90 = (Int64) 0 * shIn0_0 + sh0;
const Word32 v91 = v89 + rotateL((Word32) 3936430074 + (v83 + (v89 ^ v87 ^ v85)) + indexArray(arrIn0_0, v90), (Int64) 11);
const Int64 v92 = (Int64) 3 * shIn0_0 + sh0;
const Word32 v93 = v91 + rotateL((Word32) 3572445317 + (v85 + (v91 ^ v89 ^ v87)) + indexArray(arrIn0_0, v92), (Int64) 16);
const Int64 v94 = (Int64) 6 * shIn0_0 + sh0;
const Word32 v95 = v93 + rotateL((Word32) 76029189 + (v87 + (v93 ^ v91 ^ v89)) + indexArray(arrIn0_0, v94), (Int64) 23);
const Int64 v96 = (Int64) 9 * shIn0_0 + sh0;
const Word32 v97 = v95 + rotateL((Word32) 3654602809 + (v89 + (v95 ^ v93 ^ v91)) + indexArray(arrIn0_0, v96), (Int64) 4);
const Int64 v98 = (Int64) 12 * shIn0_0 + sh0;
const Word32 v99 = v97 + rotateL((Word32) 3873151461 + (v91 + (v97 ^ v95 ^ v93)) + indexArray(arrIn0_0, v98), (Int64) 11);
const Int64 v100 = (Int64) 15 * shIn0_0 + sh0;
const Word32 v101 = v99 + rotateL((Word32) 530742520 + (v93 + (v99 ^ v97 ^ v95)) + indexArray(arrIn0_0, v100), (Int64) 16);
const Int64 v102 = (Int64) 2 * shIn0_0 + sh0;
const Word32 v103 = v101 + rotateL((Word32) 3299628645 + (v95 + (v101 ^ v99 ^ v97)) + indexArray(arrIn0_0, v102), (Int64) 23);
const Int64 v104 = (Int64) 0 * shIn0_0 + sh0;
const Word32 v105 = v103 + rotateL((Word32) 4096336452 + (v97 + (v101 ^ (v103 | ~v99))) + indexArray(arrIn0_0, v104), (Int64) 6);
const Int64 v106 = (Int64) 7 * shIn0_0 + sh0;
const Word32 v107 = v105 + rotateL((Word32) 1126891415 + (v99 + (v103 ^ (v105 | ~v101))) + indexArray(arrIn0_0, v106), (Int64) 10);
const Int64 v108 = (Int64) 14 * shIn0_0 + sh0;
const Word32 v109 = v107 + rotateL((Word32) 2878612391 + (v101 + (v105 ^ (v107 | ~v103))) + indexArray(arrIn0_0, v108), (Int64) 15);
const Int64 v110 = (Int64) 5 * shIn0_0 + sh0;
const Word32 v111 = v109 + rotateL((Word32) 4237533241 + (v103 + (v107 ^ (v109 | ~v105))) + indexArray(arrIn0_0, v110), (Int64) 21);
const Int64 v112 = (Int64) 12 * shIn0_0 + sh0;
const Word32 v113 = v111 + rotateL((Word32) 1700485571 + (v105 + (v109 ^ (v111 | ~v107))) + indexArray(arrIn0_0, v112), (Int64) 6);
const Int64 v114 = (Int64) 3 * shIn0_0 + sh0;
const Word32 v115 = v113 + rotateL((Word32) 2399980690 + (v107 + (v111 ^ (v113 | ~v109))) + indexArray(arrIn0_0, v114), (Int64) 10);
const Int64 v116 = (Int64) 10 * shIn0_0 + sh0;
const Word32 v117 = v115 + rotateL((Word32) 4293915773 + (v109 + (v113 ^ (v115 | ~v111))) + indexArray(arrIn0_0, v116), (Int64) 15);
const Int64 v118 = (Int64) 1 * shIn0_0 + sh0;
const Word32 v119 = v117 + rotateL((Word32) 2240044497 + (v111 + (v115 ^ (v117 | ~v113))) + indexArray(arrIn0_0, v118), (Int64) 21);
const Int64 v120 = (Int64) 8 * shIn0_0 + sh0;
const Word32 v121 = v119 + rotateL((Word32) 1873313359 + (v113 + (v117 ^ (v119 | ~v115))) + indexArray(arrIn0_0, v120), (Int64) 6);
const Int64 v122 = (Int64) 15 * shIn0_0 + sh0;
const Word32 v123 = v121 + rotateL((Word32) 4264355552 + (v115 + (v119 ^ (v121 | ~v117))) + indexArray(arrIn0_0, v122), (Int64) 10);
const Int64 v124 = (Int64) 6 * shIn0_0 + sh0;
const Word32 v125 = v123 + rotateL((Word32) 2734768916 + (v117 + (v121 ^ (v123 | ~v119))) + indexArray(arrIn0_0, v124), (Int64) 15);
const Int64 v126 = (Int64) 13 * shIn0_0 + sh0;
const Word32 v127 = v125 + rotateL((Word32) 1309151649 + (v119 + (v123 ^ (v125 | ~v121))) + indexArray(arrIn0_0, v126), (Int64) 21);
const Int64 v128 = (Int64) 4 * shIn0_0 + sh0;
const Word32 v129 = v127 + rotateL((Word32) 4149444226 + (v121 + (v125 ^ (v127 | ~v123))) + indexArray(arrIn0_0, v128), (Int64) 6);
const Int64 v130 = (Int64) 11 * shIn0_0 + sh0;
const Word32 v131 = v129 + rotateL((Word32) 3174756917 + (v123 + (v127 ^ (v129 | ~v125))) + indexArray(arrIn0_0, v130), (Int64) 10);
const Int64 v132 = (Int64) 2 * shIn0_0 + sh0;
const Word32 v133 = v131 + rotateL((Word32) 718787259 + (v125 + (v129 ^ (v131 | ~v127))) + indexArray(arrIn0_0, v132), (Int64) 15);
const Int64 v134 = (Int64) 9 * shIn0_0 + sh0;
const Word32 v135 = (Word32) 1732584193 + v129;
const Word32 v136 = v5 + (v133 + rotateL((Word32) 3951481745 + (v127 + (v131 ^ (v133 | ~v129))) + indexArray(arrIn0_0, v134), (Int64) 21));
const Word32 v137 = v7 + v133;
const Word32 v138 = v6 + v131;
const Word8 v139 = v135 == v1 && (v136 == v2 && (v137 == v3 && v138 == v4));
const Int64 sh_0 = v139 ? (Int64) 0 : (Int64) -1;

if (!(sh_0 == -1)) {
Int64 y0;
Int64 _y0;
const Int64 jx0 = sh_0;
const Int64 v142 = ({ assert(ix >= 0 && ix < shIn0_0); ix; });
const Int64 x0 = (Int64) ({ assert(v142 >= 0 && v142 < shIn0_0); v142; });

arrOut_0[jx0] = x0;
}
}
}
